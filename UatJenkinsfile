#!bash

pipeline{
    agent{
      label 'docker'
    }
    environment {
      	appName = "sample-app"
      	buildconf  = "false"
        DEV_API_SERVER = "https://api.cluster-89e8.89e8.sandbox1804.opentlc.com:6443"
        UAT_API_SERVER = "https://api.cluster-e5d3.e5d3.example.opentlc.com:6443"
        SIT_NAMESPACE  = "sit"
        TRN_NAMESPACE  = "training"
        UAT_NAMESPACE  = "uat"
        PERF_NAMESPACE = "perf"
        DEV_REGISTRY_URL = "default-route-openshift-image-registry.apps.cluster-89e8.89e8.sandbox1804.opentlc.com"
        UAT_REGISTRY_URL = "default-route-openshift-image-registry.apps.cluster-e5d3.e5d3.example.opentlc.com"
    }
    stages {
        stage('Promote Image in UAT Namespace') {
	  steps {
	    script {
	      try {
	        //login to DEV OCP cluster and generate encrypted tokens
		sh('oc login -u $DEV_OCP_USER -p $DEV_OCP_PASSWD ${DEV_API_SERVER} --insecure-skip-tls-verify=true')
                def devTempVariable = sh(script: 'echo -n $DEV_OCP_USER:`oc whoami -t` | base64 ', returnStdout: true).trim()
		echo "Dev temporary variable contains: '${devTempVariable}'"
		def devRegistryEncToken = devTempVariable.replaceAll("\n", "")
		echo "devRegistryEncToken is '${devRegistryEncToken}'"
		
		//login to UAT OCP cluster and generate encrypted tokens
		sh('oc login -u $UAT_OCP_USER -p $UAT_OCP_PASSWD ${UAT_API_SERVER} --insecure-skip-tls-verify=true')
                def uatTempVariable = sh(script: 'echo -n $UAT_OCP_USER:`oc whoami -t` | base64 ', returnStdout: true).trim()
		echo "Uat temporary variable contains: '${uatTempVariable}'"
		def uatRegistryEncToken = uatTempVariable.replaceAll("\n", "")
		echo "uatRegistryEncToken is '${uatRegistryEncToken}'"
		
		sh """
	        cat $HOME/.docker/config.json
		sed -i "s/SourceRegistryPass/$devRegistryEncToken/g" $HOME/.docker/config.json
		sed -i "s/sourceRegistry/$DEV_REGISTRY_URL/g" $HOME/.docker/config.json
		sed -i "s/DestRegistryPass/$uatRegistryEncToken/g" $HOME/.docker/config.json
		sed -i "s/DestRegistry/$UAT_REGISTRY_URL/g" $HOME/.docker/config.json
		cat $HOME/.docker/config.json
		oc image mirror ${DEV_REGISTRY_URL}/${SIT_NAMESPACE}/${appName}:latest ${UAT_REGISTRY_URL}/${UAT_NAMESPACE}/${appName}:latest --insecure=true
		"""
	      } catch(e) {
		print e.getMessage()
		error "${UAT_NAMESPACE} stage having some issue. Please check logs for more details."
	      }
	    }
	  }
        }
	stage('Start Build to UAT Namespace') {
      	  steps {
            script {
              try {
                timeout(time: 600, unit: 'SECONDS') {
                  echo "Using Project: ${openshift.project()}"
                  sh('oc login -u $UAT_OCP_USER -p $UAT_OCP_PASSWD ${UAT_API_SERVER} -n ${UAT_NAMESPACE} --insecure-skip-tls-verify=true')
                  dc = sh(script: 'oc get dc ${appName} >> /dev/null 2>&1 && echo "true" || echo "false"', returnStdout: true)
                  dc = dc.trim()
                  echo "Deployment Config contains: '${dc}'"
                  
                  if('true' == dc) {
                    echo "Application already exist. Hence rolling out the latest updates on the same."
                    sh '''
                    oc rollout resume dc ${appName} -n ${UAT_NAMESPACE}
                    oc rollout status dc ${appName} -n ${UAT_NAMESPACE} -w
                    oc rollout pause  dc ${appName} -n ${UAT_NAMESPACE}
                    '''
                    echo "Application ${appName}:latest has been successfully deployed to ${UAT_NAMESPACE} namespace."
                  } else {
                    echo "Using project: ${openshift.project()}"
                    echo "Deploying the ${appName}:latest application binary to ${UAT_NAMESPACE} namespace"
                    sh '''
                    oc new-app ${appName}:latest --as-deployment-config -n ${UAT_NAMESPACE}
                    oc rollout status dc ${appName} -n ${UAT_NAMESPACE} -w
                    oc rollout pause  dc ${appName} -n ${UAT_NAMESPACE}
                    '''
                    echo "Application ${appName}:latest deployed successfully to ${UAT_NAMESPACE} namespace."     
                  }
                }
              } catch(e) {
            	print e.getMessage()
            	error "${UAT_NAMESPACE} start build stage having some issue. Please check logs for more details."
	      }
	    }
	  }
	}	
        stage('Cleared to PT') {
	  steps {
	    script {
	      input message: 'Do you want to Promote Build to PT namespace?'
	    }
	  }
	}
        stage('Promote Image in PT Namespace') {
	  steps{
	    script {
	      try {
		echo "Using project: ${openshift.project()}"
		echo "Using AppName: ${appName}"
		sh('oc login -u $UAT_OCP_USER -p $UAT_OCP_PASSWD ${UAT_API_SERVER} -n ${PERF_NAMESPACE} --insecure-skip-tls-verify=true')
		sh "oc tag ${UAT_NAMESPACE}/${appName}:latest ${PERF_NAMESPACE}/${appName}:latest -n ${PERF_NAMESPACE}"
	      } catch(e) {
		print e.getMessage()
		error "${PERF_NAMESPACE} stage having some issue. Please check logs for more details."
	      }
	    }
	  }
	}
	stage('Start Build to PT Namespace') {
      	  steps {
            script {
              try {
                timeout(time: 600, unit: 'SECONDS') {
                  echo "Using Project: ${openshift.project()}"
                  sh('oc login -u $UAT_OCP_USER -p $UAT_OCP_PASSWD ${UAT_API_SERVER} -n ${PERF_NAMESPACE} --insecure-skip-tls-verify=true')
                  dc = sh(script: 'oc get dc ${appName} >> /dev/null 2>&1 && echo "true" || echo "false"', returnStdout: true)
                  dc = dc.trim()
                  echo "Deployment Config contains: '${dc}'"
                  
                  if('true' == dc) {
                    echo "Application already exist. Hence rolling out the latest updates on the same."
                    sh '''
                    oc rollout resume dc ${appName} -n ${PERF_NAMESPACE}
                    oc rollout status dc ${appName} -n ${PERF_NAMESPACE} -w
                    oc rollout pause  dc ${appName} -n ${PERF_NAMESPACE}
                    '''
                    echo "Application ${appName}:latest has been successfully deployed to ${PERF_NAMESPACE} namespace."
                  } else {
                    echo "Using project: ${openshift.project()}"
                    echo "Deploying the ${appName}:latest application binary to ${PERF_NAMESPACE} namespace"
                    sh '''
                    oc new-app ${appName}:latest --as-deployment-config -n ${PERF_NAMESPACE}
                    oc rollout status dc ${appName} -n ${PERF_NAMESPACE} -w
                    oc rollout pause  dc ${appName} -n ${PERF_NAMESPACE}
                    '''
                    echo "Application ${appName}:latest deployed successfully to ${PERF_NAMESPACE} namespace."     
                  }
                }
              } catch(e) {
            	print e.getMessage()
            	error "${PERF_NAMESPACE} start build stage having some issue. Please check logs for more details."
	      }
	    }
	  }
	}
        stage('Cleared to Training') {
	  steps {
	    script {
	      input message: 'Do you want to Promote Build to Training namespace?'
	    }
	  }
	}
	stage('Promote Image in Training Namespace') {
          steps {
	    script {
	      try {
		//login to DEV OCP cluster and generate encrypted tokens
		sh('oc login -u $DEV_OCP_USER -p $DEV_OCP_PASSWD ${DEV_API_SERVER} --insecure-skip-tls-verify=true')
                def devTempVariable = sh(script: 'echo -n $DEV_OCP_USER:`oc whoami -t` | base64 ', returnStdout: true).trim()
		echo "Dev temporary variable contains: '${devTempVariable}'"
		def devRegistryEncToken = devTempVariable.replaceAll("\n", "")
		echo "devRegistryEncToken is '${devRegistryEncToken}'"
		
		//login to UAT OCP cluster and generate encrypted tokens
		sh('oc login -u $UAT_OCP_USER -p $UAT_OCP_PASSWD ${UAT_API_SERVER} --insecure-skip-tls-verify=true')
                def uatTempVariable = sh(script: 'echo -n $UAT_OCP_USER:`oc whoami -t` | base64 ', returnStdout: true).trim()
		echo "Uat temporary variable contains: '${uatTempVariable}'"
		def uatRegistryEncToken = uatTempVariable.replaceAll("\n", "")
		echo "uatRegistryEncToken is '${uatRegistryEncToken}'"
		
		sh """
		cat $HOME/.docker/config.json
		sed -i "s/SourceRegistryPass/$uatRegistryEncToken/g" $HOME/.docker/config.json
		sed -i "s/SourceRegistry/$UAT_REGISTRY_URL/g" $HOME/.docker/config.json
		sed -i "s/DestRegistryPass/$devRegistryEncToken/g" $HOME/.docker/config.json
		sed -i "s/DestRegistry/$DEV_REGISTRY_URL/g" $HOME/.docker/config.json
		cat $HOME/.docker/config.json
		oc image mirror ${UAT_REGISTRY_URL}/${PERF_NAMESPACE}/${appName}:latest ${DEV_REGISTRY_URL}/${TRN_NAMESPACE}/${appName}:latest --insecure=true
		"""
	      } catch(e) {
		print e.getMessage()
		error "${TRN_NAMESPACE} stage having some issue. Please check logs for more details."
	      }
	   }
        }
     }
     stage('Start Build to Training Namespace') {
      	  steps {
            script {
              try {
                timeout(time: 600, unit: 'SECONDS') {
                  echo "Using Project: ${openshift.project()}"
                  sh('oc login -u $DEV_OCP_USER -p $DEV_OCP_PASSWD ${DEV_API_SERVER} -n ${TRN_NAMESPACE} --insecure-skip-tls-verify=true')
                  dc = sh(script: 'oc get dc ${appName} >> /dev/null 2>&1 && echo "true" || echo "false"', returnStdout: true)
                  dc = dc.trim()
                  echo "Deployment Config contains: '${dc}'"
                  
                  if('true' == dc) {
                    echo "Application already exist. Hence rolling out the latest updates on the same."
                    sh '''
                    oc rollout resume dc ${appName} -n ${TRN_NAMESPACE}
                    oc rollout status dc ${appName} -n ${TRN_NAMESPACE} -w
                    oc rollout pause  dc ${appName} -n ${TRN_NAMESPACE}
                    '''
                    echo "Application ${appName}:latest has been successfully deployed to ${TRN_NAMESPACE} namespace."
                  } else {
                    echo "Using project: ${openshift.project()}"
                    echo "Deploying the ${appName}:latest application binary to ${TRN_NAMESPACE} namespace"
                    sh '''
                    oc new-app ${appName}:latest --as-deployment-config -n ${TRN_NAMESPACE}
                    oc rollout status dc ${appName} -n ${TRN_NAMESPACE} -w
                    oc rollout pause  dc ${appName} -n ${TRN_NAMESPACE}
                    '''
                    echo "Application ${appName}:latest deployed successfully to ${TRN_NAMESPACE} namespace."     
                  }
                }
              } catch(e) {
            	print e.getMessage()
            	error "${TRN_NAMESPACE} start build stage having some issue. Please check logs for more details."
	      }
	    }
	  }
	}
     }
}
